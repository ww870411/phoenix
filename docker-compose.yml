version: "3.9"

services:
  db:
    image: postgres:15-alpine
    container_name: phoenix_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: phoenix
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - type: bind
        source: "D:/编程项目/phoenix/db_data"
        target: /var/lib/postgresql/data
      - type: bind
        source: ./backend/sql
        target: /app/sql

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: phoenix_backend
    restart: unless-stopped
    environment:
      # 供后端使用的数据库连接字符串（后续在 settings 中读取）
      DATABASE_URL: postgresql://postgres:postgres@db:5432/phoenix
      PYTHONUNBUFFERED: "1"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      # 绑定挂载：用于存放配置与用户数据（满足你的需求）
      - ./backend_data:/app/data
      # 源码热更新：将整个项目挂载到容器 /app，便于开发时实时生效
      - ./:/app

  frontend:
    image: node:20-alpine
    container_name: phoenix_frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      # 将 node_modules 放在命名卷中，避免写入宿主文件夹
      - frontend_node_modules:/app/node_modules

volumes:
  frontend_node_modules: {}
