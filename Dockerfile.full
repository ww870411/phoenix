# Stage 1: Build frontend assets
FROM node:20-alpine AS frontend-builder

WORKDIR /app
ENV NPM_CONFIG_UPDATE_NOTIFIER=false \
    NPM_CONFIG_FUND=false

COPY frontend/package.json frontend/package-lock.json ./
RUN npm ci
COPY frontend/ /app

ARG VITE_API_BASE=/api/v1
ENV VITE_API_BASE=${VITE_API_BASE}
RUN npm run build

# Stage 2: Install backend dependencies
FROM python:3.12-slim AS backend-builder

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

WORKDIR /build
RUN apt-get update && apt-get install -y --no-install-recommends build-essential libpq-dev \
    && rm -rf /var/lib/apt/lists/*

COPY backend/requirements.txt .
RUN pip install --upgrade pip \
    && pip install --prefix=/install -r requirements.txt

# Stage 3: Final image (backend + frontend + nginx)
FROM python:3.12-slim

ARG BUILD_TIMESTAMP="unknown"
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DATA_DIRECTORY=/app/data \
    BUILD_TIMESTAMP=${BUILD_TIMESTAMP}

WORKDIR /app

RUN apt-get update \
    && apt-get install -y --no-install-recommends nginx supervisor libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && rm -f /etc/nginx/conf.d/default.conf

COPY --from=backend-builder /install /usr/local
COPY backend /app/backend
COPY backend_data /app/data-template
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

COPY deploy/nginx.full.conf /etc/nginx/conf.d/default.conf
COPY deploy/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

RUN mkdir -p /var/log/supervisor /var/run/nginx

EXPOSE 80
VOLUME ["/app/data"]

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
